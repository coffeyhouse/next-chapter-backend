# core/sa/models/author.py
from sqlalchemy import Column, String
from sqlalchemy.orm import relationship
from .base import Base, TimestampMixin

class Author(Base, TimestampMixin):
    __tablename__ = 'author'

    goodreads_id = Column(String, primary_key=True)
    name = Column(String, nullable=False)
    bio = Column(String)
    image_url = Column(String)

    # Relationships
    books = relationship('Book', secondary='book_author', back_populates='authors')


# core/sa/models/base.py
from datetime import datetime
from sqlalchemy.orm import DeclarativeBase, mapped_column, Mapped
from sqlalchemy import DateTime

class Base(DeclarativeBase):
    """Base class for all models"""
    pass

class TimestampMixin:
    """Mixin to add created_at, updated_at and last_synced_at columns"""
    created_at: Mapped[datetime] = mapped_column(DateTime, nullable=False, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow)
    last_synced_at: Mapped[datetime | None] = mapped_column(DateTime, nullable=True)


# core/sa/models/book.py
from sqlalchemy import Column, String, Integer, Float, Boolean, ForeignKey, Table, DateTime
from sqlalchemy.orm import relationship
from .base import Base, TimestampMixin

# Association tables for many-to-many relationships
book_author = Table(
    'book_author',
    Base.metadata,
    Column('work_id', String, ForeignKey('book.work_id'), primary_key=True),
    Column('author_id', String, ForeignKey('author.goodreads_id'), primary_key=True),
    Column('role', String)
)

book_genre = Table(
    'book_genre',
    Base.metadata,
    Column('work_id', String, ForeignKey('book.work_id'), primary_key=True),
    Column('genre_id', Integer, ForeignKey('genre.id'), primary_key=True)
)

book_similar = Table(
    'book_similar',
    Base.metadata,
    Column('work_id', String, ForeignKey('book.work_id'), primary_key=True),
    Column('similar_work_id', String, ForeignKey('book.work_id'), primary_key=True)
)

class Book(Base, TimestampMixin):
    __tablename__ = 'book'

    goodreads_id = Column(String, primary_key=True)
    work_id = Column(String, unique=True, nullable=False)
    title = Column(String, nullable=False)
    published_date = Column(DateTime)
    published_state = Column(String)
    language = Column(String)
    calibre_id = Column(Integer)
    pages = Column(Integer)
    isbn = Column(String)
    goodreads_rating = Column(Float)
    goodreads_votes = Column(Integer)
    description = Column(String)
    image_url = Column(String)
    source = Column(String)
    hidden = Column(Boolean, default=False)

    # Relationships
    authors = relationship('Author', secondary='book_author', back_populates='books')
    genres = relationship('Genre', secondary='book_genre', back_populates='books')
    series = relationship('Series', secondary='book_series', back_populates='books')
    
    # Self-referential relationship for similar books
    similar_to = relationship(
        'Book',
        secondary=book_similar,
        primaryjoin=work_id==book_similar.c.work_id,
        secondaryjoin=work_id==book_similar.c.similar_work_id,
        backref='similar_books'
    )


# core/sa/models/genre.py
from sqlalchemy import Column, Integer, String, DateTime
from sqlalchemy.orm import relationship
from datetime import datetime
from .base import Base

class Genre(Base):
    __tablename__ = 'genre'

    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False, unique=True)
    created_at = Column(DateTime, nullable=False, default=datetime.utcnow)
    updated_at = Column(DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow)

    # Relationships
    books = relationship('Book', secondary='book_genre', back_populates='genres')


# core/sa/models/library.py
from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base, TimestampMixin

class Library(Base, TimestampMixin):
    __tablename__ = 'library'

    id = Column(Integer, primary_key=True)
    title = Column(String, nullable=False)
    calibre_id = Column(Integer)
    goodreads_id = Column(String, unique=True)
    work_id = Column(String, ForeignKey('book.work_id'), nullable=False)
    isbn = Column(String)

    # Relationships
    book = relationship('Book', backref='library_entry')


# core/sa/models/series.py
from sqlalchemy import Column, String, Float, ForeignKey, Table
from sqlalchemy.orm import relationship
from .base import Base, TimestampMixin

# Association table for books in series
book_series = Table(
    'book_series',
    Base.metadata,
    Column('work_id', String, ForeignKey('book.work_id'), primary_key=True),
    Column('series_id', String, ForeignKey('series.goodreads_id'), primary_key=True),
    Column('series_order', Float)
)

class Series(Base, TimestampMixin):
    __tablename__ = 'series'

    goodreads_id = Column(String, primary_key=True)
    title = Column(String, nullable=False)

    # Relationships
    books = relationship('Book', secondary=book_series, back_populates='series')


# core/sa/models/user.py
from sqlalchemy import Column, Integer, String, Boolean, ForeignKey, Table, DateTime
from sqlalchemy.orm import relationship
from .base import Base, TimestampMixin

# Association table for user's book statuses
book_user = Table(
    'book_user',
    Base.metadata,
    Column('work_id', String, ForeignKey('book.work_id'), primary_key=True),
    Column('user_id', Integer, ForeignKey('user.id'), primary_key=True),
    Column('status', String),
    Column('source', String),
    Column('started_at', DateTime),
    Column('finished_at', DateTime)
)

class User(Base, TimestampMixin):
    __tablename__ = 'user'

    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)

    # Relationships
    books = relationship('Book', secondary=book_user, backref='users')


# core/sa/models/__init__.py
from .base import Base, TimestampMixin
from .book import Book, book_author, book_genre, book_similar
from .author import Author
from .series import Series, book_series
from .genre import Genre
from .library import Library
from .user import User, book_user

__all__ = [
    'Base',
    'TimestampMixin',
    'Book',
    'Author',
    'Series',
    'Genre',
    'Library',
    'User',
    'book_author',
    'book_genre',
    'book_series',
    'book_similar',
    'book_user'
]

