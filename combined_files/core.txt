# core/exclusions.py
from typing import Optional

EXCLUSION_RULES = {
    "genres": ["Graphic Novel", "Comics"],  # Example: exclude these genres
    "min_votes": 10,                        # Exclude books with fewer than 10 votes
    "require_description": True,            # Exclude books missing a description
}

def get_exclusion_reason(book: dict) -> Optional[str]:
    # Check genres first.
    if "genres" in book and book["genres"]:
        for genre in book["genres"]:
            if genre.get("name") in EXCLUSION_RULES.get("genres", []):
                return f"genre '{genre.get('name')}' is disallowed."
    # Check votes.
    min_votes = EXCLUSION_RULES.get("min_votes")
    if min_votes is not None and "goodreads_votes" in book:
        try:
            votes = int(book["goodreads_votes"])
            if votes < min_votes:
                return f"votes ({votes}) are below the minimum threshold of {min_votes}."
        except (ValueError, TypeError):
            return "votes could not be determined."
    # Check description.
    if EXCLUSION_RULES.get("require_description", False):
        if not book.get("description"):
            return "description is missing."
    return None

def should_exclude_book(book: dict) -> bool:
    return get_exclusion_reason(book) is not None


